{"version":3,"file":"queues.js","sourceRoot":"","sources":["../../src/queues.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * The function that will be called when an item is processed.\n * If the function returns false, the processing will stop.\n */\ntype QueueItemCallback<T> = (message: T) => boolean | Promise<boolean>;\n\ntype QueueArgs<T> = {\n  /**\n   * See {@link QueueItemCallback}\n   */\n  itemCallback: QueueItemCallback<T>;\n  /**\n   * If true, the queue will not process any items, even when {@link BaseQueue.process} is called.\n   * To enable processing, call {@link BaseQueue.enable} or {@link BaseQueue.enableAndProcess}.\n   * @default false\n   */\n  isDisabled?: boolean;\n}\n\nexport class BaseQueue<T> {\n  private _queue: T[] = [];\n  private _itemCallback: QueueItemCallback<T>;\n  private _canProcess = true;\n  private _isProcessing = false;\n\n  constructor(args: QueueArgs<T>) {\n    if (!args.itemCallback) {\n      throw new Error(\"itemCallback is required\");\n    }\n    this._itemCallback = args.itemCallback;\n\n    if (args.isDisabled) {\n      this.disable();\n    }\n  }\n\n  public enable() {\n    this._canProcess = true;\n  }\n\n  public disable() {\n    this._canProcess = false;\n  }\n\n  public add(item: T) {\n    this._queue.push(item);\n  }\n\n  public addAndProcess(item: T) {\n    this.add(item);\n    this.process();\n  }\n\n  public enableAndProcess() {\n    this.enable();\n    this.process();\n  }\n\n  public process() {\n    if (!this._canProcess) {\n      return;\n    }\n\n    if (this._isProcessing) {\n      return;\n    }\n\n    this._isProcessing = true;\n    this._processNext();\n  }\n\n  private _processNext() {\n    if (!this._canProcess) {\n      return;\n    }\n\n    if (this._queue.length === 0) {\n      this._isProcessing = false;\n      return;\n    }\n\n    const item = this._queue.shift();\n    // process the item, making sure we wait for the result before processing the next item\n    Promise.resolve(this._itemCallback(item!)).then((shouldContinue) => {\n      if (shouldContinue) {\n        this._processNext();\n      } else {\n        this._isProcessing = false;\n      }\n    }).catch(() => {\n      this._isProcessing = false;\n    });\n  }\n}\n\ntype AckMessagesQueueArgs = {\n  expirationMs: number;\n  timeoutExpiredCallback: AckTimeoutExpiredCallback;\n}\n\ntype AckMessage = {\n  sequenceNumber: bigint;\n  addedAt: number;\n}\n\ntype AckTimeoutExpiredCallback = (notReceivedAck: AckMessage['sequenceNumber'][]) => void;\n\nexport class AckMessagesQueue {\n  private _queue: AckMessage[] = [];\n  private _expirationMs: number;\n  private _timeoutExpiredCallback: AckTimeoutExpiredCallback;\n  private _lastAckTimeout: NodeJS.Timeout | null = null;\n\n  constructor(args: AckMessagesQueueArgs) {\n    if (!args.expirationMs) {\n      throw new Error(\"checkTimeoutMs is required\");\n    }\n    this._expirationMs = Math.floor(args.expirationMs); // make sure it's an integer\n\n    if (!args.timeoutExpiredCallback) {\n      throw new Error(\"timeoutExpiredCallback is required\");\n    }\n    this._timeoutExpiredCallback = args.timeoutExpiredCallback;\n  }\n\n  private _startLastAckTimeout() {\n    this._lastAckTimeout = setTimeout(() => {\n      this._onTimeoutExpired(this._queue);\n    }, this._expirationMs);\n  }\n\n  private _restartLastAckTimeout() {\n    if (this._lastAckTimeout) {\n      clearTimeout(this._lastAckTimeout);\n    }\n\n    this._startLastAckTimeout();\n  }\n\n  private _onTimeoutExpired(items: AckMessage[]) {\n    this._timeoutExpiredCallback(items.map((item) => item.sequenceNumber));\n    this._queue = [];\n  }\n\n  public add(sequenceNumber: bigint) {\n    const last = this.last();\n    if (last && sequenceNumber <= last.sequenceNumber) {\n      throw new Error(`Sequence number ${sequenceNumber} is not greater than last: ${last.sequenceNumber}`);\n    }\n\n    this._queue.push({\n      sequenceNumber,\n      addedAt: Date.now(),\n    });\n\n    if (!this._lastAckTimeout) {\n      this._startLastAckTimeout();\n    }\n  }\n\n  public ack(sequenceNumber: bigint) {\n    const index = this._queue.findIndex((item) => item.sequenceNumber === sequenceNumber);\n    if (index >= 0) {\n      // remove all items up to and including the acked item\n      this._queue.splice(0, index + 1);\n    } else {\n      const last = this.last();\n      // we throw an error only if the received sequence number is not in the queue\n      // and is greater than the last sequence number in the queue\n      if (last && sequenceNumber > last.sequenceNumber) {\n        throw new Error(`Sequence number ${sequenceNumber} is greater than last: ${last.sequenceNumber}`);\n      }\n    }\n\n    // for the remaining items in the queue, check if they have expired\n    // if yes, call the callback for the expired items\n    const expiredItems = this._queue.filter((item) => Date.now() - item.addedAt >= this._expirationMs);\n    if (expiredItems.length > 0) {\n      return this._onTimeoutExpired(expiredItems);\n    }\n\n    this._restartLastAckTimeout();\n  }\n\n  public last(): AckMessage | null {\n    if (this._queue.length === 0) {\n      return null;\n    }\n    return this._queue[this._queue.length - 1];\n  }\n\n  public clear() {\n    this._queue = [];\n    if (this._lastAckTimeout) {\n      clearTimeout(this._lastAckTimeout);\n      this._lastAckTimeout = null;\n    }\n  }\n}\n"]}