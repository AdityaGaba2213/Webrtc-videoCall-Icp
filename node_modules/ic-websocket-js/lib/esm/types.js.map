{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAU/C,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,GAAY,EAAgC,EAAE;IACpF,OAAO,CACL,GAAG,YAAY,MAAM;QACrB,OAAQ,GAA6B,CAAC,GAAG,KAAK,QAAQ;QACrD,GAA6B,CAAC,OAAO,YAAY,UAAU;QAC3D,GAA6B,CAAC,IAAI,YAAY,UAAU;QACxD,GAA6B,CAAC,IAAI,YAAY,UAAU,CAC1D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,GAAY,EAAoB,EAAE;IACrD,uEAAuE;IACvE,0DAA0D;IAC1D,gIAAgI;IAChI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QAC5B,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,CAAC;QACH,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QAChC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAKF,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,GAAY,EAAkC,EAAE;IACxF,OAAO,CACL,GAAG,YAAY,MAAM;QACrB,WAAW,CAAE,GAA+B,CAAC,iBAAiB,CAAC,CAChE,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { ActorMethod } from \"@dfinity/agent\";\nimport { Principal } from \"@dfinity/principal\";\n\nexport type GetInnerType<S> = S extends ActorMethod<infer T> ? T : never;\n\nexport type ClientIncomingMessage = {\n  key: string;\n  content: Uint8Array;\n  cert: Uint8Array;\n  tree: Uint8Array;\n};\nexport const isClientIncomingMessage = (arg: unknown): arg is ClientIncomingMessage => {\n  return (\n    arg instanceof Object &&\n    typeof (arg as ClientIncomingMessage).key === \"string\" &&\n    (arg as ClientIncomingMessage).content instanceof Uint8Array &&\n    (arg as ClientIncomingMessage).cert instanceof Uint8Array &&\n    (arg as ClientIncomingMessage).tree instanceof Uint8Array\n  );\n};\n\nconst isPrincipal = (arg: unknown): arg is Principal => {\n  // the Principal.from method doesn't throw if the argument is a string,\n  // but in our case it must already be a Principal instance\n  // see https://github.com/dfinity/agent-js/blob/349598672c50d738100d123a43f5d1c8fac77854/packages/principal/src/index.ts#L39-L53\n  if (typeof arg === \"string\") {\n    return false;\n  }\n\n  try {\n    Principal.from(arg);\n  } catch (e) {\n    console.error(\"isPrincipal\", e);\n    return false;\n  }\n\n  return true;\n};\n\nexport type GatewayHandshakeMessage = {\n  gateway_principal: Principal | Uint8Array;\n};\nexport const isGatewayHandshakeMessage = (arg: unknown): arg is GatewayHandshakeMessage => {\n  return (\n    arg instanceof Object &&\n    isPrincipal((arg as GatewayHandshakeMessage).gateway_principal)\n  );\n};\n"]}