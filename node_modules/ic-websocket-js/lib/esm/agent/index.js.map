{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/agent/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Principal } from '@dfinity/principal';\nimport {\n  HttpAgent,\n  IdentityInvalidError,\n  makeNonce,\n  SignIdentity,\n  Cbor,\n  Expiry,\n  CallRequest,\n  Endpoint,\n  Envelope,\n  SubmitRequestType,\n  CanisterStatus,\n} from '@dfinity/agent';\nimport {\n  WsAgentRequest,\n  WsAgentRequestMessage,\n  WsAgentRequestTransformFn,\n  WsAgentSubmitRequest,\n} from './types';\nimport { makeWsNonceTransform } from './transforms';\n\n// Default delta for ingress expiry is 5 minutes.\nconst DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000;\n\nclass DefaultWsError extends Error {\n  constructor(public readonly message: string) {\n    super(message);\n    Object.setPrototypeOf(this, DefaultWsError.prototype);\n  }\n}\n\nexport interface WsAgentOptions {\n  // Another WsAgent to inherit configuration of. This\n  // is only used at construction.\n  source?: WsAgent;\n\n  // Must be an **open** WebSocket instance.\n  ws: WebSocket;\n\n  // The http agent needed for the syncTime method.\n  httpAgent: HttpAgent;\n\n  // The principal used to send messages. This cannot be empty at the request\n  // time (will throw).\n  identity: SignIdentity | Promise<SignIdentity>;\n\n  /**\n   * Prevents the agent from providing a unique {@link Nonce} with each call.\n   * Enabling may cause rate limiting of identical requests\n   * at the boundary nodes.\n   *\n   * To add your own nonce generation logic, you can use the following:\n   * @example\n   * import {makeNonceTransform, makeNonce} from '@dfinity/agent';\n   * const agent = new HttpAgent({ disableNonce: true });\n   * agent.addTransform(makeNonceTransform(makeNonce);\n   * @default false\n   */\n  disableNonce?: boolean;\n  /**\n   * Number of times to retry requests before throwing an error\n   * @default 3\n   */\n  retryTimes?: number;\n}\n\nexport class WsAgent {\n  private readonly _pipeline: WsAgentRequestTransformFn[] = [];\n  private _identity: Promise<SignIdentity>;\n  private readonly _ws: WebSocket;\n  private _timeDiffMsecs = 0;\n  private _httpAgent: HttpAgent;\n  private readonly _retryTimes; // Retry requests N times before erroring by default\n  public readonly _isAgent = true;\n\n  constructor(options: WsAgentOptions) {\n    if (options.source) {\n      if (!(options.source instanceof WsAgent)) {\n        throw new Error(\"An Agent's source can only be another WsAgent\");\n      }\n      this._pipeline = [...options.source._pipeline];\n      this._identity = options.source._identity;\n      this._ws = options.source._ws;\n      this._httpAgent = options.source._httpAgent;\n    } else {\n      if (!options.identity) {\n        throw new Error('An identity must be provided to the WsAgent');\n      }\n      this._identity = Promise.resolve(options.identity);\n      if (!options.ws) {\n        throw new Error('A WebSocket instance must be provided to the WsAgent');\n      } else if (options.ws.readyState !== WebSocket.OPEN) {\n        throw new DefaultWsError('The provided WebSocket is not open');\n      }\n      this._ws = options.ws;\n      if (!options.httpAgent) {\n        throw new Error('An httpAgent must be provided to the WsAgent');\n      }\n      this._httpAgent = options.httpAgent;\n    }\n    // Default is 3, only set from option if greater or equal to 0\n    this._retryTimes =\n      options.retryTimes !== undefined && options.retryTimes >= 0 ? options.retryTimes : 3;\n\n    // Add a nonce transform to ensure calls are unique\n    if (!options.disableNonce) {\n      this.addTransform(makeWsNonceTransform(makeNonce));\n    }\n  }\n\n  public addTransform(fn: WsAgentRequestTransformFn, priority = fn.priority || 0): void {\n    // Keep the pipeline sorted at all time, by priority.\n    const i = this._pipeline.findIndex(x => (x.priority || 0) < priority);\n    this._pipeline.splice(i >= 0 ? i : this._pipeline.length, 0, Object.assign(fn, { priority }));\n  }\n\n  public async getPrincipal(): Promise<Principal> {\n    if (!this._identity) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    return (await this._identity).getPrincipal();\n  }\n\n  public async call(\n    canisterId: Principal | string,\n    options: {\n      methodName: string;\n      arg: ArrayBuffer;\n      effectiveCanisterId?: Principal | string;\n    },\n  ): Promise<void> {\n    const id = await this._identity;\n    if (!id) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    const canister = Principal.from(canisterId);\n\n    const sender: Principal = id.getPrincipal();\n\n    let ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS);\n\n    // If the value is off by more than 30 seconds, reconcile system time with the network\n    if (Math.abs(this._timeDiffMsecs) > 1_000 * 30) {\n      ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS + this._timeDiffMsecs);\n    }\n\n    const submit: CallRequest = {\n      request_type: SubmitRequestType.Call,\n      canister_id: canister,\n      method_name: options.methodName,\n      arg: options.arg,\n      sender,\n      ingress_expiry,\n    };\n\n    const transformedRequest = (await this._transform({\n      endpoint: Endpoint.Call,\n      message: submit,\n    })) as WsAgentSubmitRequest;\n\n    // we need to adapt out ws request to the identity's transform\n    // in order to get the signed request\n    const idTransformedRequest = await id.transformRequest({\n      // mock the request to be compatible\n      request: {\n        body: null,\n        method: 'POST',\n        headers: {},\n      },\n      endpoint: Endpoint.Call,\n      body: transformedRequest.message,\n    }) as { body: Envelope<CallRequest> };\n\n    const message: WsAgentRequestMessage<CallRequest> = {\n      envelope: idTransformedRequest.body,\n    };\n\n    this._requestAndRetry(message);\n  }\n\n  /**\n   * Sends a fire-and-forget request body to the WebSocket Gateway.\n   * If the request fails, the request \n   */\n  private _requestAndRetry(\n    message: WsAgentRequestMessage<CallRequest>,\n    tries = 0,\n  ): void {\n    const messageBytes = Cbor.encode(message);\n\n    try {\n      return this._ws.send(messageBytes);\n    } catch (error) {\n      if (this._retryTimes > tries) {\n        console.warn(`${error}  Retrying request.`);\n        return this._requestAndRetry(message, tries + 1);\n      }\n    }\n\n    throw new DefaultWsError(\"Sending the envelope through the WebSocket failed.\");\n  }\n\n  /**\n   * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request\n   * @param {Principal} canisterId - Pass a canister ID if you need to sync the time with a particular replica. Uses the management canister by default\n   */\n  public async syncTime(canisterId?: Principal): Promise<void> {\n    const callTime = Date.now();\n    try {\n      if (!canisterId) {\n        console.log(\n          'Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai',\n        );\n      }\n      const status = await CanisterStatus.request({\n        // Fall back with canisterId of the ICP Ledger\n        canisterId: canisterId ?? Principal.from('ryjl3-tyaaa-aaaaa-aaaba-cai'),\n        agent: this._httpAgent,\n        paths: ['time'],\n      });\n\n      const replicaTime = status.get('time');\n      if (replicaTime) {\n        this._timeDiffMsecs = Number(replicaTime as any) - Number(callTime);\n      }\n    } catch (error) {\n      console.error('Caught exception while attempting to sync time:', error);\n    }\n  }\n\n  public replaceIdentity(identity: SignIdentity): void {\n    this._identity = Promise.resolve(identity);\n  }\n\n  protected _transform(request: WsAgentRequest): Promise<WsAgentRequest> {\n    let p = Promise.resolve(request);\n\n    for (const fn of this._pipeline) {\n      p = p.then(r => fn(r).then(r2 => r2 || r));\n    }\n\n    return p;\n  }\n}\n"]}