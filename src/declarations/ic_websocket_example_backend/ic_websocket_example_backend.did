// // Application-specific types
// type AppMessage = record {
//   text : text;
//   timestamp : nat64;
// };

// // IC WebSocket types
// type ClientPrincipal = principal;
// type GatewayPrincipal = principal;
// type ClientKey = record {
//   client_principal : ClientPrincipal;
//   client_nonce : nat64;
// };

// type WebsocketMessage = record {
//   client_key : ClientKey;
//   sequence_num : nat64;
//   timestamp : nat64;
//   is_service_message : bool;
//   content : blob;
// };

// type CanisterOutputMessage = record {
//   client_key : ClientKey;
//   key : text;
//   content : blob;
// };

// type CanisterOutputCertifiedMessages = record {
//   messages : vec CanisterOutputMessage;
//   cert : blob;
//   tree : blob;
//   is_end_of_queue : bool;
// };

// type CanisterWsOpenArguments = record {
//   client_nonce : nat64;
//   gateway_principal : GatewayPrincipal;
// };

// type CanisterWsOpenResult = variant {
//   Ok : null;
//   Err : text;
// };

// type CanisterWsCloseArguments = record {
//   client_key : ClientKey;
// };

// type CanisterWsCloseResult = variant {
//   Ok : null;
//   Err : text;
// };

// type CanisterWsMessageArguments = record {
//   msg : WebsocketMessage;
// };

// type CanisterWsMessageResult = variant {
//   Ok : null;
//   Err : text;
// };

// type CanisterWsGetMessagesArguments = record {
//   nonce : nat64;
// };

// type CanisterWsGetMessagesResult = variant {
//   Ok : CanisterOutputCertifiedMessages;
//   Err : text;
// };

// service : {
//   "ws_open" : (CanisterWsOpenArguments) -> (CanisterWsOpenResult);
//   "ws_close" : (CanisterWsCloseArguments) -> (CanisterWsCloseResult);
//   "ws_message" : (CanisterWsMessageArguments, opt AppMessage) -> (CanisterWsMessageResult);
//   "ws_get_messages" : (CanisterWsGetMessagesArguments) -> (CanisterWsGetMessagesResult) query;
// };

// Application-specific types
type AppMessage = record {
  text : text;
  timestamp : nat64;
};

// WebRTC types
type IceCandidate = record {
  candidate : text;
  sdp_mid : opt text;
  sdp_m_line_index : opt nat32;
};

type SessionDescription = record {
  type_ : text;
  sdp : text;
};

type WebRtcMessage = variant {
  Offer : SessionDescription;
  Answer : SessionDescription;
  Ice : IceCandidate;
  JoinRoom : text;
  LeaveRoom : text;
  Chat : AppMessage;
};

// IC WebSocket types
type ClientPrincipal = principal;
type GatewayPrincipal = principal;
type ClientKey = record {
  client_principal : ClientPrincipal;
  client_nonce : nat64;
};

type WebsocketMessage = record {
  client_key : ClientKey;
  sequence_num : nat64;
  timestamp : nat64;
  is_service_message : bool;
  content : blob;
};

type CanisterOutputMessage = record {
  client_key : ClientKey;
  key : text;
  content : blob;
};

type CanisterOutputCertifiedMessages = record {
  messages : vec CanisterOutputMessage;
  cert : blob;
  tree : blob;
  is_end_of_queue : bool;
};

type CanisterWsOpenArguments = record {
  client_nonce : nat64;
  gateway_principal : GatewayPrincipal;
};

type CanisterWsOpenResult = variant {
  Ok : null;
  Err : text;
};

type CanisterWsCloseArguments = record {
  client_key : ClientKey;
};

type CanisterWsCloseResult = variant {
  Ok : null;
  Err : text;
};

type CanisterWsMessageArguments = record {
  msg : WebsocketMessage;
};

type CanisterWsMessageResult = variant {
  Ok : null;
  Err : text;
};

type CanisterWsGetMessagesArguments = record {
  nonce : nat64;
};

type CanisterWsGetMessagesResult = variant {
  Ok : CanisterOutputCertifiedMessages;
  Err : text;
};

service : {
  // Room management methods
  create_video_room : (text) -> (text);
  list_video_rooms : () -> (vec text) query;
  get_room_participant_count : (text) -> (nat64) query;
  get_current_room : () -> (opt text) query;
  
  // WebSocket protocol methods (updated to handle WebRtcMessage)
  ws_open : (CanisterWsOpenArguments) -> (CanisterWsOpenResult);
  ws_close : (CanisterWsCloseArguments) -> (CanisterWsCloseResult);
  ws_message : (CanisterWsMessageArguments, opt WebRtcMessage) -> (CanisterWsMessageResult);
  ws_get_messages : (CanisterWsGetMessagesArguments) -> (CanisterWsGetMessagesResult) query;
}